#!/usr/bin/env bash

<%-

  # Configure NGINX
  nginx_conf  = session.staged_root.join("nginx.conf")
  app_sock    = "rshiny-#{session.id}.sock"
  app_log     = session.staged_root.join("app.log")
  app_wrapper = session.staged_root.join("ood_app_wrapper.R")
  nginx_cache = session.staged_root.join("nginx_cache").tap { |p| Dir.mkdir(p.to_s) unless p.exist? }

-%>

#
# Create Shiny App launcher script#

export SOCKET="$TMPDIR/<%= app_sock %>"

echo "Creating Shiny App launcher..."
(
umask 077
sed 's/^ \{2\}//' > "<%= app_wrapper %>" << EOT
sock <- "$SOCKET"
  attr(sock, "mask") <- strtoi("0077", 8)
  options(shiny.port = sock)
  options(shiny.launch.browser = FALSE)
  options(shiny.autoreload = TRUE)
  shiny::runApp("<%= context.app %>")
EOT
)

#
# Create NGINX configuration file
#

echo "Creating NGINX config..."
(
umask 077
mkdir -p "<%= nginx_cache %>"
sed 's/^ \{2\}//' > "<%= nginx_conf %>" << EOT
  # the entry point of the container passes this flag
  # daemon off; 
  pid <%= nginx_cache %>/nginx.pid;
  worker_processes 1;

  events {
    worker_connections 1024;
  }

  http {
    client_body_temp_path <%= nginx_cache %>/client_body_temp;
    proxy_temp_path       <%= nginx_cache %>/proxy_temp;
    fastcgi_temp_path     <%= nginx_cache %>/fastcgi_temp;
    uwsgi_temp_path       <%= nginx_cache %>/uwsgi_temp;
    scgi_temp_path        <%= nginx_cache %>/scgi_temp;

    map \$http_upgrade \$connection_upgrade {
      default upgrade;
      ''      close;
    }

    server {
      listen ${port};

      location /auth {
        content_by_lua_block {
          ngx.req.read_body()
          local args, err = ngx.req.get_post_args()
          if args and args.password == "${password}" then
            local session = require "resty.session".start()
            session.data.authenticated = true
            session:save()
          end
          return ngx.redirect("/")
        }
      }

      location / {
        access_by_lua_block {
          local session = require "resty.session".open()
          if session.data.authenticated ~= true then
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end
        }
        proxy_pass http://unix:$SOCKET:/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;
        proxy_read_timeout 7d;
      }
    }
  }
EOT
)

# Set working directory to home directory
cd "${HOME}"

#
# Start Shiny App server
#
module purge

module load gnu/9.1.0 mkl/2019.0.5 R/4.0.2

# hack for my rshiny libs
module use "$HOME/.local/share/lmodfiles"
module load pitzer/rshiny

# Output debug info
module list

# Launch Shiny App
set -x
R --no-save --slave -f "<%= app_wrapper %>" > <%= app_log %> 2>&1 &

#
# Wait until Unix socket is created
#

TIME=60
FOUND=0
echo "Waiting ${TIME} seconds until Unix socket is created..."
for ((i=1; i<=TIME*2; i++)); do
  if [[ -e "$SOCKET" ]]; then
    FOUND=1
    echo "Found socket file!"
    break
  fi
  sleep 0.5
done

[[ ${FOUND} -eq 0 ]] && echo "ERROR: Nothing listening on $SOCKET!" && exit 1

singularity run \
  -B "<%= nginx_conf %>:/usr/local/openresty/nginx/conf/nginx.conf" \
  -B "$TMPDIR:$TMPDIR" \
  /users/PZS0714/johrstrom/Public/images/sing/open-resty.sif
